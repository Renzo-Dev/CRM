version: "3.9"

services:
  # üåê NGINX ‚Äî API Gateway
  nginx:
    container_name: nginx_gateway
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"  # –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ API
    networks:
      - crm-network
    depends_on:
      - auth-service
      - user-service
      - lead-service
      - task-service
      - file-service
      - frontend-develop

    # üåê FRONTEND ‚Äî –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Vue.js)
  frontend-develop:
    container_name: frontend_develop
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/crm-app/:/app
    networks:
      - crm-network

  # üîê AUTH SERVICE ‚Äî –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ JWT
  auth-service:
    container_name: auth_service
    build:
      context: ./services/auth-service
    volumes:
      - ./services/auth-service/src:/var/www
    expose:
      - "9000"  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç –¥–ª—è nginx
    networks:
      - crm-network
    depends_on:
      - mysql
      - redis
      - rabbitmq

  # üë§ USER SERVICE ‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
  user-service:
    container_name: user_service
    build:
      context: ./services/user-service
    volumes:
      - ./services/user-service/src:/var/www
    #    env_file:
    #      - ./services/user-service/.env
    expose:
      - "9001"
    networks:
      - crm-network
    depends_on:
      - mysql

  # üìá LEAD SERVICE ‚Äî –ö–ª–∏–µ–Ω—Ç—ã, –ª–∏–¥—ã, CRM-–≤–æ—Ä–æ–Ω–∫–∞
  lead-service:
    container_name: lead_service
    build:
      context: ./services/lead-service
    volumes:
      - ./services/lead-service/src:/var/www
    #    env_file:
    #      - ./services/lead-service/.env
    expose:
      - "9002"
    networks:
      - crm-network
    depends_on:
      - mysql

  # ‚úÖ TASK SERVICE ‚Äî –ó–∞–¥–∞—á–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  task-service:
    container_name: task_service
    build:
      context: ./services/task-service
    volumes:
      - ./services/task-service/src:/var/www
    #    env_file:
    #      - ./services/task-service/.env
    expose:
      - "9003"
    networks:
      - crm-network
    depends_on:
      - mysql
      - redis
      - rabbitmq

  # üìÅ FILE SERVICE ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ MinIO
  file-service:
    container_name: file_service
    build:
      context: ./services/file-service
    volumes:
      - ./services/file-service/src:/var/www
      - minio-data:/data
    #    env_file:
    #      - ./services/file-service/.env
    expose:
      - "9004"
    networks:
      - crm-network
    depends_on:
      - mysql
      - minio

  # üîî NOTIFICATION SERVICE ‚Äî Email / Telegram / –û—á–µ—Ä–µ–¥–∏
  notification-service:
    container_name: notification_service
    build:
      context: ./services/notification-service
    volumes:
      - ./services/notification-service/src:/var/www
    #    env_file:
    #      - ./services/notification-service/.env
    expose:
      - "9005"
    networks:
      - crm-network
    depends_on:
      - rabbitmq

  # üê¨ MySQL (–æ–¥–Ω–∞, –º–Ω–æ–≥–æ–±–∞–∑–æ–≤–∞—è)
  mysql:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"  # –¥–æ—Å—Ç—É–ø —Å —Ö–æ—Å—Ç–∞ (DBeaver –∏ —Ç.–¥.)
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - crm-network

  # üß† Redis ‚Äî –∫–µ—à –∏ –æ—á–µ—Ä–µ–¥–∏
  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT}:6379"  # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø —Å–Ω–∞—Ä—É–∂–∏
    networks:
      - crm-network

  # üêá RabbitMQ ‚Äî –±—Ä–æ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (—Å UI)
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Web UI
    networks:
      - crm-network

  # ‚òÅÔ∏è MinIO ‚Äî —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤ (–∞–Ω–∞–ª–æ–≥ AWS S3)
  minio:
    container_name: minio_service
    image: minio/minio
    command: server /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"  # Web UI –∏ API
    volumes:
      - minio-data:/data
    networks:
      - crm-network

# üîÑ –•—Ä–∞–Ω–∏–ª–∏—â–∞
volumes:
  mysql-data:
  minio-data:

# üåê –û–±—â–∞—è —Å–µ—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
networks:
  crm-network:
    driver: bridge
